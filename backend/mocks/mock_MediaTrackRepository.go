// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entity "backend/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockMediaTrackRepository is an autogenerated mock type for the MediaTrackRepository type
type MockMediaTrackRepository struct {
	mock.Mock
}

type MockMediaTrackRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMediaTrackRepository) EXPECT() *MockMediaTrackRepository_Expecter {
	return &MockMediaTrackRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *MockMediaTrackRepository) Create(_a0 *entity.MediaTrack) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.MediaTrack) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMediaTrackRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockMediaTrackRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *entity.MediaTrack
func (_e *MockMediaTrackRepository_Expecter) Create(_a0 interface{}) *MockMediaTrackRepository_Create_Call {
	return &MockMediaTrackRepository_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *MockMediaTrackRepository_Create_Call) Run(run func(_a0 *entity.MediaTrack)) *MockMediaTrackRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.MediaTrack))
	})
	return _c
}

func (_c *MockMediaTrackRepository_Create_Call) Return(_a0 error) *MockMediaTrackRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMediaTrackRepository_Create_Call) RunAndReturn(run func(*entity.MediaTrack) error) *MockMediaTrackRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: userID, mediaID
func (_m *MockMediaTrackRepository) Delete(userID uint, mediaID uint) error {
	ret := _m.Called(userID, mediaID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(userID, mediaID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMediaTrackRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockMediaTrackRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - userID uint
//   - mediaID uint
func (_e *MockMediaTrackRepository_Expecter) Delete(userID interface{}, mediaID interface{}) *MockMediaTrackRepository_Delete_Call {
	return &MockMediaTrackRepository_Delete_Call{Call: _e.mock.On("Delete", userID, mediaID)}
}

func (_c *MockMediaTrackRepository_Delete_Call) Run(run func(userID uint, mediaID uint)) *MockMediaTrackRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *MockMediaTrackRepository_Delete_Call) Return(_a0 error) *MockMediaTrackRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMediaTrackRepository_Delete_Call) RunAndReturn(run func(uint, uint) error) *MockMediaTrackRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: userID, mediaID
func (_m *MockMediaTrackRepository) Get(userID uint, mediaID uint) (*entity.MediaTrack, error) {
	ret := _m.Called(userID, mediaID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *entity.MediaTrack
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*entity.MediaTrack, error)); ok {
		return rf(userID, mediaID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *entity.MediaTrack); ok {
		r0 = rf(userID, mediaID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.MediaTrack)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(userID, mediaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMediaTrackRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockMediaTrackRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - userID uint
//   - mediaID uint
func (_e *MockMediaTrackRepository_Expecter) Get(userID interface{}, mediaID interface{}) *MockMediaTrackRepository_Get_Call {
	return &MockMediaTrackRepository_Get_Call{Call: _e.mock.On("Get", userID, mediaID)}
}

func (_c *MockMediaTrackRepository_Get_Call) Run(run func(userID uint, mediaID uint)) *MockMediaTrackRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *MockMediaTrackRepository_Get_Call) Return(_a0 *entity.MediaTrack, _a1 error) *MockMediaTrackRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMediaTrackRepository_Get_Call) RunAndReturn(run func(uint, uint) (*entity.MediaTrack, error)) *MockMediaTrackRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// LoadAll provides a mock function with given fields: userID
func (_m *MockMediaTrackRepository) LoadAll(userID uint) (*[]entity.MediaTrackView, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for LoadAll")
	}

	var r0 *[]entity.MediaTrackView
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*[]entity.MediaTrackView, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) *[]entity.MediaTrackView); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.MediaTrackView)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMediaTrackRepository_LoadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadAll'
type MockMediaTrackRepository_LoadAll_Call struct {
	*mock.Call
}

// LoadAll is a helper method to define mock.On call
//   - userID uint
func (_e *MockMediaTrackRepository_Expecter) LoadAll(userID interface{}) *MockMediaTrackRepository_LoadAll_Call {
	return &MockMediaTrackRepository_LoadAll_Call{Call: _e.mock.On("LoadAll", userID)}
}

func (_c *MockMediaTrackRepository_LoadAll_Call) Run(run func(userID uint)) *MockMediaTrackRepository_LoadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockMediaTrackRepository_LoadAll_Call) Return(_a0 *[]entity.MediaTrackView, _a1 error) *MockMediaTrackRepository_LoadAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMediaTrackRepository_LoadAll_Call) RunAndReturn(run func(uint) (*[]entity.MediaTrackView, error)) *MockMediaTrackRepository_LoadAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *MockMediaTrackRepository) Update(_a0 *entity.MediaTrack) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.MediaTrack) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMediaTrackRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockMediaTrackRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 *entity.MediaTrack
func (_e *MockMediaTrackRepository_Expecter) Update(_a0 interface{}) *MockMediaTrackRepository_Update_Call {
	return &MockMediaTrackRepository_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *MockMediaTrackRepository_Update_Call) Run(run func(_a0 *entity.MediaTrack)) *MockMediaTrackRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.MediaTrack))
	})
	return _c
}

func (_c *MockMediaTrackRepository_Update_Call) Return(_a0 error) *MockMediaTrackRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMediaTrackRepository_Update_Call) RunAndReturn(run func(*entity.MediaTrack) error) *MockMediaTrackRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMediaTrackRepository creates a new instance of MockMediaTrackRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMediaTrackRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMediaTrackRepository {
	mock := &MockMediaTrackRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
