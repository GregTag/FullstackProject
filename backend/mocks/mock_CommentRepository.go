// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entity "backend/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockCommentRepository is an autogenerated mock type for the CommentRepository type
type MockCommentRepository struct {
	mock.Mock
}

type MockCommentRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCommentRepository) EXPECT() *MockCommentRepository_Expecter {
	return &MockCommentRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: _a0
func (_m *MockCommentRepository) Create(_a0 *entity.Comment) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Comment) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockCommentRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - _a0 *entity.Comment
func (_e *MockCommentRepository_Expecter) Create(_a0 interface{}) *MockCommentRepository_Create_Call {
	return &MockCommentRepository_Create_Call{Call: _e.mock.On("Create", _a0)}
}

func (_c *MockCommentRepository_Create_Call) Run(run func(_a0 *entity.Comment)) *MockCommentRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Comment))
	})
	return _c
}

func (_c *MockCommentRepository_Create_Call) Return(_a0 error) *MockCommentRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentRepository_Create_Call) RunAndReturn(run func(*entity.Comment) error) *MockCommentRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id, senderID
func (_m *MockCommentRepository) Delete(id uint, senderID uint) error {
	ret := _m.Called(id, senderID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(id, senderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentRepository_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockCommentRepository_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id uint
//   - senderID uint
func (_e *MockCommentRepository_Expecter) Delete(id interface{}, senderID interface{}) *MockCommentRepository_Delete_Call {
	return &MockCommentRepository_Delete_Call{Call: _e.mock.On("Delete", id, senderID)}
}

func (_c *MockCommentRepository_Delete_Call) Run(run func(id uint, senderID uint)) *MockCommentRepository_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *MockCommentRepository_Delete_Call) Return(_a0 error) *MockCommentRepository_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentRepository_Delete_Call) RunAndReturn(run func(uint, uint) error) *MockCommentRepository_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: id, senderID
func (_m *MockCommentRepository) Load(id uint, senderID uint) (*entity.CommentView, error) {
	ret := _m.Called(id, senderID)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 *entity.CommentView
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, uint) (*entity.CommentView, error)); ok {
		return rf(id, senderID)
	}
	if rf, ok := ret.Get(0).(func(uint, uint) *entity.CommentView); ok {
		r0 = rf(id, senderID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.CommentView)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, uint) error); ok {
		r1 = rf(id, senderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentRepository_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockCommentRepository_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - id uint
//   - senderID uint
func (_e *MockCommentRepository_Expecter) Load(id interface{}, senderID interface{}) *MockCommentRepository_Load_Call {
	return &MockCommentRepository_Load_Call{Call: _e.mock.On("Load", id, senderID)}
}

func (_c *MockCommentRepository_Load_Call) Run(run func(id uint, senderID uint)) *MockCommentRepository_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(uint))
	})
	return _c
}

func (_c *MockCommentRepository_Load_Call) Return(_a0 *entity.CommentView, _a1 error) *MockCommentRepository_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentRepository_Load_Call) RunAndReturn(run func(uint, uint) (*entity.CommentView, error)) *MockCommentRepository_Load_Call {
	_c.Call.Return(run)
	return _c
}

// LoadAll provides a mock function with given fields: mediaID
func (_m *MockCommentRepository) LoadAll(mediaID uint) (*[]entity.CommentView, error) {
	ret := _m.Called(mediaID)

	if len(ret) == 0 {
		panic("no return value specified for LoadAll")
	}

	var r0 *[]entity.CommentView
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*[]entity.CommentView, error)); ok {
		return rf(mediaID)
	}
	if rf, ok := ret.Get(0).(func(uint) *[]entity.CommentView); ok {
		r0 = rf(mediaID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.CommentView)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(mediaID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockCommentRepository_LoadAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadAll'
type MockCommentRepository_LoadAll_Call struct {
	*mock.Call
}

// LoadAll is a helper method to define mock.On call
//   - mediaID uint
func (_e *MockCommentRepository_Expecter) LoadAll(mediaID interface{}) *MockCommentRepository_LoadAll_Call {
	return &MockCommentRepository_LoadAll_Call{Call: _e.mock.On("LoadAll", mediaID)}
}

func (_c *MockCommentRepository_LoadAll_Call) Run(run func(mediaID uint)) *MockCommentRepository_LoadAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockCommentRepository_LoadAll_Call) Return(_a0 *[]entity.CommentView, _a1 error) *MockCommentRepository_LoadAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockCommentRepository_LoadAll_Call) RunAndReturn(run func(uint) (*[]entity.CommentView, error)) *MockCommentRepository_LoadAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: _a0
func (_m *MockCommentRepository) Update(_a0 *entity.Comment) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Comment) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockCommentRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockCommentRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - _a0 *entity.Comment
func (_e *MockCommentRepository_Expecter) Update(_a0 interface{}) *MockCommentRepository_Update_Call {
	return &MockCommentRepository_Update_Call{Call: _e.mock.On("Update", _a0)}
}

func (_c *MockCommentRepository_Update_Call) Run(run func(_a0 *entity.Comment)) *MockCommentRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.Comment))
	})
	return _c
}

func (_c *MockCommentRepository_Update_Call) Return(_a0 error) *MockCommentRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockCommentRepository_Update_Call) RunAndReturn(run func(*entity.Comment) error) *MockCommentRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockCommentRepository creates a new instance of MockCommentRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCommentRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCommentRepository {
	mock := &MockCommentRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
