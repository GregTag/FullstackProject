// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	entity "backend/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Change provides a mock function with given fields: _a0
func (_m *MockUserService) Change(_a0 *entity.UserView) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Change")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.UserView) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserService_Change_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Change'
type MockUserService_Change_Call struct {
	*mock.Call
}

// Change is a helper method to define mock.On call
//   - _a0 *entity.UserView
func (_e *MockUserService_Expecter) Change(_a0 interface{}) *MockUserService_Change_Call {
	return &MockUserService_Change_Call{Call: _e.mock.On("Change", _a0)}
}

func (_c *MockUserService_Change_Call) Run(run func(_a0 *entity.UserView)) *MockUserService_Change_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserView))
	})
	return _c
}

func (_c *MockUserService_Change_Call) Return(_a0 error) *MockUserService_Change_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserService_Change_Call) RunAndReturn(run func(*entity.UserView) error) *MockUserService_Change_Call {
	_c.Call.Return(run)
	return _c
}

// Load provides a mock function with given fields: _a0
func (_m *MockUserService) Load(_a0 string) (*entity.UserInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Load")
	}

	var r0 *entity.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.UserInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.UserInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Load_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Load'
type MockUserService_Load_Call struct {
	*mock.Call
}

// Load is a helper method to define mock.On call
//   - _a0 string
func (_e *MockUserService_Expecter) Load(_a0 interface{}) *MockUserService_Load_Call {
	return &MockUserService_Load_Call{Call: _e.mock.On("Load", _a0)}
}

func (_c *MockUserService_Load_Call) Run(run func(_a0 string)) *MockUserService_Load_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserService_Load_Call) Return(_a0 *entity.UserInfo, _a1 error) *MockUserService_Load_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Load_Call) RunAndReturn(run func(string) (*entity.UserInfo, error)) *MockUserService_Load_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: _a0
func (_m *MockUserService) Login(_a0 *entity.UserLogin) (*entity.UserInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *entity.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.UserLogin) (*entity.UserInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.UserLogin) *entity.UserInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.UserLogin) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockUserService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - _a0 *entity.UserLogin
func (_e *MockUserService_Expecter) Login(_a0 interface{}) *MockUserService_Login_Call {
	return &MockUserService_Login_Call{Call: _e.mock.On("Login", _a0)}
}

func (_c *MockUserService_Login_Call) Run(run func(_a0 *entity.UserLogin)) *MockUserService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserLogin))
	})
	return _c
}

func (_c *MockUserService_Login_Call) Return(_a0 *entity.UserInfo, _a1 error) *MockUserService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Login_Call) RunAndReturn(run func(*entity.UserLogin) (*entity.UserInfo, error)) *MockUserService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: _a0
func (_m *MockUserService) Register(_a0 *entity.UserRegister) (*entity.UserInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 *entity.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.UserRegister) (*entity.UserInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*entity.UserRegister) *entity.UserInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.UserRegister) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 *entity.UserRegister
func (_e *MockUserService_Expecter) Register(_a0 interface{}) *MockUserService_Register_Call {
	return &MockUserService_Register_Call{Call: _e.mock.On("Register", _a0)}
}

func (_c *MockUserService_Register_Call) Run(run func(_a0 *entity.UserRegister)) *MockUserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.UserRegister))
	})
	return _c
}

func (_c *MockUserService_Register_Call) Return(_a0 *entity.UserInfo, _a1 error) *MockUserService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Register_Call) RunAndReturn(run func(*entity.UserRegister) (*entity.UserInfo, error)) *MockUserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
