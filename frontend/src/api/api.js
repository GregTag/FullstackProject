/* tslint:disable */
/* eslint-disable */
"use strict";
/**
 * Universal Media Organizer API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserApi = exports.UserApiFactory = exports.UserApiFp = exports.UserApiAxiosParamCreator = exports.TrackApi = exports.TrackApiFactory = exports.TrackApiFp = exports.TrackApiAxiosParamCreator = exports.MediaApi = exports.MediaApiFactory = exports.MediaApiFp = exports.MediaApiAxiosParamCreator = exports.CommentApi = exports.CommentApiFactory = exports.CommentApiFp = exports.CommentApiAxiosParamCreator = exports.UserRegisterPost400ResponseStatusEnum = exports.UserRegisterPost200ResponseStatusEnum = exports.UserLogoutPost200ResponseStatusEnum = exports.UserEditPut200ResponseStatusEnum = exports.TrackAddPost200ResponseStatusEnum = exports.SearchPost200ResponseStatusEnum = exports.MediaLoadIdGet200ResponseStatusEnum = exports.CommentAddPost200ResponseStatusEnum = void 0;
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var common_1 = require("./common");
// @ts-ignore
var base_1 = require("./base");
exports.CommentAddPost200ResponseStatusEnum = {
    Success: 'success'
};
exports.MediaLoadIdGet200ResponseStatusEnum = {
    Success: 'success'
};
exports.SearchPost200ResponseStatusEnum = {
    Success: 'success'
};
exports.TrackAddPost200ResponseStatusEnum = {
    Success: 'success'
};
exports.UserEditPut200ResponseStatusEnum = {
    Success: 'success'
};
exports.UserLogoutPost200ResponseStatusEnum = {
    Success: 'success'
};
exports.UserRegisterPost200ResponseStatusEnum = {
    Success: 'success'
};
exports.UserRegisterPost400ResponseStatusEnum = {
    Error: 'error'
};
/**
 * CommentApi - axios parameter creator
 * @export
 */
var CommentApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add comment
         * @param {CommentAddPostRequest} commentAddPostRequest Comment information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentAddPost: function (commentAddPostRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'commentAddPostRequest' is not null or undefined
                            (0, common_1.assertParamExists)('commentAddPost', 'commentAddPostRequest', commentAddPostRequest);
                            localVarPath = "/comment/add";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(commentAddPostRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete comment
         * @param {number} id Comment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentDeleteIdDelete: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('commentDeleteIdDelete', 'id', id);
                            localVarPath = "/comment/delete/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit comment
         * @param {CommentEditPutRequest} commentEditPutRequest Comment information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentEditPut: function (commentEditPutRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'commentEditPutRequest' is not null or undefined
                            (0, common_1.assertParamExists)('commentEditPut', 'commentEditPutRequest', commentEditPutRequest);
                            localVarPath = "/comment/edit";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(commentEditPutRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.CommentApiAxiosParamCreator = CommentApiAxiosParamCreator;
/**
 * CommentApi - functional programming interface
 * @export
 */
var CommentApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.CommentApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Add comment
         * @param {CommentAddPostRequest} commentAddPostRequest Comment information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentAddPost: function (commentAddPostRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.commentAddPost(commentAddPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete comment
         * @param {number} id Comment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentDeleteIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.commentDeleteIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit comment
         * @param {CommentEditPutRequest} commentEditPutRequest Comment information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentEditPut: function (commentEditPutRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.commentEditPut(commentEditPutRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.CommentApiFp = CommentApiFp;
/**
 * CommentApi - factory interface
 * @export
 */
var CommentApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.CommentApiFp)(configuration);
    return {
        /**
         *
         * @summary Add comment
         * @param {CommentAddPostRequest} commentAddPostRequest Comment information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentAddPost: function (commentAddPostRequest, options) {
            return localVarFp.commentAddPost(commentAddPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete comment
         * @param {number} id Comment ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentDeleteIdDelete: function (id, options) {
            return localVarFp.commentDeleteIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit comment
         * @param {CommentEditPutRequest} commentEditPutRequest Comment information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commentEditPut: function (commentEditPutRequest, options) {
            return localVarFp.commentEditPut(commentEditPutRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.CommentApiFactory = CommentApiFactory;
/**
 * CommentApi - object-oriented interface
 * @export
 * @class CommentApi
 * @extends {BaseAPI}
 */
var CommentApi = /** @class */ (function (_super) {
    __extends(CommentApi, _super);
    function CommentApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add comment
     * @param {CommentAddPostRequest} commentAddPostRequest Comment information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    CommentApi.prototype.commentAddPost = function (commentAddPostRequest, options) {
        var _this = this;
        return (0, exports.CommentApiFp)(this.configuration).commentAddPost(commentAddPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete comment
     * @param {number} id Comment ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    CommentApi.prototype.commentDeleteIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.CommentApiFp)(this.configuration).commentDeleteIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit comment
     * @param {CommentEditPutRequest} commentEditPutRequest Comment information to edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentApi
     */
    CommentApi.prototype.commentEditPut = function (commentEditPutRequest, options) {
        var _this = this;
        return (0, exports.CommentApiFp)(this.configuration).commentEditPut(commentEditPutRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return CommentApi;
}(base_1.BaseAPI));
exports.CommentApi = CommentApi;
/**
 * MediaApi - axios parameter creator
 * @export
 */
var MediaApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add media
         * @param {MediaAddPostRequest} mediaAddPostRequest Media information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaAddPost: function (mediaAddPostRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mediaAddPostRequest' is not null or undefined
                            (0, common_1.assertParamExists)('mediaAddPost', 'mediaAddPostRequest', mediaAddPostRequest);
                            localVarPath = "/media/add";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mediaAddPostRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete media
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaDeleteIdDelete: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('mediaDeleteIdDelete', 'id', id);
                            localVarPath = "/media/delete/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit media
         * @param {MediaEditPutRequest} mediaEditPutRequest Media information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaEditPut: function (mediaEditPutRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'mediaEditPutRequest' is not null or undefined
                            (0, common_1.assertParamExists)('mediaEditPut', 'mediaEditPutRequest', mediaEditPutRequest);
                            localVarPath = "/media/edit";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(mediaEditPutRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get media info
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLoadIdGet: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'id' is not null or undefined
                    (0, common_1.assertParamExists)('mediaLoadIdGet', 'id', id);
                    localVarPath = "/media/load/{id}"
                        .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Search media
         * @param {Filter} filter Search filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPost: function (filter, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'filter' is not null or undefined
                    (0, common_1.assertParamExists)('searchPost', 'filter', filter);
                    localVarPath = "/search";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(filter, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.MediaApiAxiosParamCreator = MediaApiAxiosParamCreator;
/**
 * MediaApi - functional programming interface
 * @export
 */
var MediaApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.MediaApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Add media
         * @param {MediaAddPostRequest} mediaAddPostRequest Media information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaAddPost: function (mediaAddPostRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mediaAddPost(mediaAddPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete media
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaDeleteIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mediaDeleteIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit media
         * @param {MediaEditPutRequest} mediaEditPutRequest Media information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaEditPut: function (mediaEditPutRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mediaEditPut(mediaEditPutRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get media info
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLoadIdGet: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.mediaLoadIdGet(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Search media
         * @param {Filter} filter Search filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPost: function (filter, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.searchPost(filter, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.MediaApiFp = MediaApiFp;
/**
 * MediaApi - factory interface
 * @export
 */
var MediaApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.MediaApiFp)(configuration);
    return {
        /**
         *
         * @summary Add media
         * @param {MediaAddPostRequest} mediaAddPostRequest Media information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaAddPost: function (mediaAddPostRequest, options) {
            return localVarFp.mediaAddPost(mediaAddPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete media
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaDeleteIdDelete: function (id, options) {
            return localVarFp.mediaDeleteIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit media
         * @param {MediaEditPutRequest} mediaEditPutRequest Media information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaEditPut: function (mediaEditPutRequest, options) {
            return localVarFp.mediaEditPut(mediaEditPutRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get media info
         * @param {number} id Media ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mediaLoadIdGet: function (id, options) {
            return localVarFp.mediaLoadIdGet(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Search media
         * @param {Filter} filter Search filter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchPost: function (filter, options) {
            return localVarFp.searchPost(filter, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.MediaApiFactory = MediaApiFactory;
/**
 * MediaApi - object-oriented interface
 * @export
 * @class MediaApi
 * @extends {BaseAPI}
 */
var MediaApi = /** @class */ (function (_super) {
    __extends(MediaApi, _super);
    function MediaApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add media
     * @param {MediaAddPostRequest} mediaAddPostRequest Media information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    MediaApi.prototype.mediaAddPost = function (mediaAddPostRequest, options) {
        var _this = this;
        return (0, exports.MediaApiFp)(this.configuration).mediaAddPost(mediaAddPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete media
     * @param {number} id Media ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    MediaApi.prototype.mediaDeleteIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.MediaApiFp)(this.configuration).mediaDeleteIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit media
     * @param {MediaEditPutRequest} mediaEditPutRequest Media information to edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    MediaApi.prototype.mediaEditPut = function (mediaEditPutRequest, options) {
        var _this = this;
        return (0, exports.MediaApiFp)(this.configuration).mediaEditPut(mediaEditPutRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get media info
     * @param {number} id Media ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    MediaApi.prototype.mediaLoadIdGet = function (id, options) {
        var _this = this;
        return (0, exports.MediaApiFp)(this.configuration).mediaLoadIdGet(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Search media
     * @param {Filter} filter Search filter
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MediaApi
     */
    MediaApi.prototype.searchPost = function (filter, options) {
        var _this = this;
        return (0, exports.MediaApiFp)(this.configuration).searchPost(filter, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return MediaApi;
}(base_1.BaseAPI));
exports.MediaApi = MediaApi;
/**
 * TrackApi - axios parameter creator
 * @export
 */
var TrackApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Add track
         * @param {TrackAddPostRequest} trackAddPostRequest Track information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackAddPost: function (trackAddPostRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trackAddPostRequest' is not null or undefined
                            (0, common_1.assertParamExists)('trackAddPost', 'trackAddPostRequest', trackAddPostRequest);
                            localVarPath = "/track/add";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(trackAddPostRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete track
         * @param {number} id Track ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackDeleteIdDelete: function (id, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'id' is not null or undefined
                            (0, common_1.assertParamExists)('trackDeleteIdDelete', 'id', id);
                            localVarPath = "/track/delete/{id}"
                                .replace("{".concat("id", "}"), encodeURIComponent(String(id)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit track
         * @param {TrackAddPostRequest} trackAddPostRequest Track information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackEditPut: function (trackAddPostRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'trackAddPostRequest' is not null or undefined
                            (0, common_1.assertParamExists)('trackEditPut', 'trackAddPostRequest', trackAddPostRequest);
                            localVarPath = "/track/edit";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(trackAddPostRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
    };
};
exports.TrackApiAxiosParamCreator = TrackApiAxiosParamCreator;
/**
 * TrackApi - functional programming interface
 * @export
 */
var TrackApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.TrackApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Add track
         * @param {TrackAddPostRequest} trackAddPostRequest Track information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackAddPost: function (trackAddPostRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.trackAddPost(trackAddPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Delete track
         * @param {number} id Track ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackDeleteIdDelete: function (id, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.trackDeleteIdDelete(id, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Edit track
         * @param {TrackAddPostRequest} trackAddPostRequest Track information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackEditPut: function (trackAddPostRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.trackEditPut(trackAddPostRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.TrackApiFp = TrackApiFp;
/**
 * TrackApi - factory interface
 * @export
 */
var TrackApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.TrackApiFp)(configuration);
    return {
        /**
         *
         * @summary Add track
         * @param {TrackAddPostRequest} trackAddPostRequest Track information
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackAddPost: function (trackAddPostRequest, options) {
            return localVarFp.trackAddPost(trackAddPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Delete track
         * @param {number} id Track ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackDeleteIdDelete: function (id, options) {
            return localVarFp.trackDeleteIdDelete(id, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Edit track
         * @param {TrackAddPostRequest} trackAddPostRequest Track information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        trackEditPut: function (trackAddPostRequest, options) {
            return localVarFp.trackEditPut(trackAddPostRequest, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.TrackApiFactory = TrackApiFactory;
/**
 * TrackApi - object-oriented interface
 * @export
 * @class TrackApi
 * @extends {BaseAPI}
 */
var TrackApi = /** @class */ (function (_super) {
    __extends(TrackApi, _super);
    function TrackApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Add track
     * @param {TrackAddPostRequest} trackAddPostRequest Track information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackApi
     */
    TrackApi.prototype.trackAddPost = function (trackAddPostRequest, options) {
        var _this = this;
        return (0, exports.TrackApiFp)(this.configuration).trackAddPost(trackAddPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Delete track
     * @param {number} id Track ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackApi
     */
    TrackApi.prototype.trackDeleteIdDelete = function (id, options) {
        var _this = this;
        return (0, exports.TrackApiFp)(this.configuration).trackDeleteIdDelete(id, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Edit track
     * @param {TrackAddPostRequest} trackAddPostRequest Track information to edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackApi
     */
    TrackApi.prototype.trackEditPut = function (trackAddPostRequest, options) {
        var _this = this;
        return (0, exports.TrackApiFp)(this.configuration).trackEditPut(trackAddPostRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return TrackApi;
}(base_1.BaseAPI));
exports.TrackApi = TrackApi;
/**
 * UserApi - axios parameter creator
 * @export
 */
var UserApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         *
         * @summary Edit user
         * @param {UserEditPutRequest} userEditPutRequest User information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEditPut: function (userEditPutRequest, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'userEditPutRequest' is not null or undefined
                            (0, common_1.assertParamExists)('userEditPut', 'userEditPutRequest', userEditPutRequest);
                            localVarPath = "/user/edit";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            localVarHeaderParameter['Content-Type'] = 'application/json';
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userEditPutRequest, localVarRequestOptions, configuration);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Get user info
         * @param {string} login User login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoadLoginGet: function (login, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            // verify required parameter 'login' is not null or undefined
                            (0, common_1.assertParamExists)('userLoadLoginGet', 'login', login);
                            localVarPath = "/user/load/{login}"
                                .replace("{".concat("login", "}"), encodeURIComponent(String(login)));
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Login user
         * @param {UserLogin} userLogin User credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoginPost: function (userLogin, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userLogin' is not null or undefined
                    (0, common_1.assertParamExists)('userLoginPost', 'userLogin', userLogin);
                    localVarPath = "/user/login";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userLogin, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
        /**
         *
         * @summary Logout user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogoutPost: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            localVarPath = "/user/logout";
                            localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                            if (configuration) {
                                baseOptions = configuration.baseOptions;
                            }
                            localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                            localVarHeaderParameter = {};
                            localVarQueryParameter = {};
                            // authentication bearerAuth required
                            // http bearer authentication required
                            return [4 /*yield*/, (0, common_1.setBearerAuthToObject)(localVarHeaderParameter, configuration)];
                        case 1:
                            // authentication bearerAuth required
                            // http bearer authentication required
                            _a.sent();
                            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                            headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                            localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                            return [2 /*return*/, {
                                    url: (0, common_1.toPathString)(localVarUrlObj),
                                    options: localVarRequestOptions,
                                }];
                    }
                });
            });
        },
        /**
         *
         * @summary Register user
         * @param {UserRegister} userRegister User credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegisterPost: function (userRegister, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'userRegister' is not null or undefined
                    (0, common_1.assertParamExists)('userRegisterPost', 'userRegister', userRegister);
                    localVarPath = "/user/register";
                    localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(userRegister, localVarRequestOptions, configuration);
                    return [2 /*return*/, {
                            url: (0, common_1.toPathString)(localVarUrlObj),
                            options: localVarRequestOptions,
                        }];
                });
            });
        },
    };
};
exports.UserApiAxiosParamCreator = UserApiAxiosParamCreator;
/**
 * UserApi - functional programming interface
 * @export
 */
var UserApiFp = function (configuration) {
    var localVarAxiosParamCreator = (0, exports.UserApiAxiosParamCreator)(configuration);
    return {
        /**
         *
         * @summary Edit user
         * @param {UserEditPutRequest} userEditPutRequest User information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEditPut: function (userEditPutRequest, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.userEditPut(userEditPutRequest, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Get user info
         * @param {string} login User login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoadLoginGet: function (login, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.userLoadLoginGet(login, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Login user
         * @param {UserLogin} userLogin User credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoginPost: function (userLogin, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.userLoginPost(userLogin, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Logout user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogoutPost: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.userLogoutPost(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
        /**
         *
         * @summary Register user
         * @param {UserRegister} userRegister User credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegisterPost: function (userRegister, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, localVarAxiosParamCreator.userRegisterPost(userRegister, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)];
                    }
                });
            });
        },
    };
};
exports.UserApiFp = UserApiFp;
/**
 * UserApi - factory interface
 * @export
 */
var UserApiFactory = function (configuration, basePath, axios) {
    var localVarFp = (0, exports.UserApiFp)(configuration);
    return {
        /**
         *
         * @summary Edit user
         * @param {UserEditPutRequest} userEditPutRequest User information to edit
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userEditPut: function (userEditPutRequest, options) {
            return localVarFp.userEditPut(userEditPutRequest, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Get user info
         * @param {string} login User login
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoadLoginGet: function (login, options) {
            return localVarFp.userLoadLoginGet(login, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Login user
         * @param {UserLogin} userLogin User credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLoginPost: function (userLogin, options) {
            return localVarFp.userLoginPost(userLogin, options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Logout user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userLogoutPost: function (options) {
            return localVarFp.userLogoutPost(options).then(function (request) { return request(axios, basePath); });
        },
        /**
         *
         * @summary Register user
         * @param {UserRegister} userRegister User credentials
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userRegisterPost: function (userRegister, options) {
            return localVarFp.userRegisterPost(userRegister, options).then(function (request) { return request(axios, basePath); });
        },
    };
};
exports.UserApiFactory = UserApiFactory;
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
var UserApi = /** @class */ (function (_super) {
    __extends(UserApi, _super);
    function UserApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *
     * @summary Edit user
     * @param {UserEditPutRequest} userEditPutRequest User information to edit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.userEditPut = function (userEditPutRequest, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).userEditPut(userEditPutRequest, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Get user info
     * @param {string} login User login
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.userLoadLoginGet = function (login, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).userLoadLoginGet(login, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Login user
     * @param {UserLogin} userLogin User credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.userLoginPost = function (userLogin, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).userLoginPost(userLogin, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Logout user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.userLogoutPost = function (options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).userLogoutPost(options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     *
     * @summary Register user
     * @param {UserRegister} userRegister User credentials
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    UserApi.prototype.userRegisterPost = function (userRegister, options) {
        var _this = this;
        return (0, exports.UserApiFp)(this.configuration).userRegisterPost(userRegister, options).then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return UserApi;
}(base_1.BaseAPI));
exports.UserApi = UserApi;
